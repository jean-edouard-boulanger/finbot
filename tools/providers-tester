#!/usr/bin/env python
import json
import logging
import sys
import asyncio
from argparse import ArgumentParser
from pathlib import Path
from typing import Any

from finbot.core.schema import CurrencyCode
from finbot.core.serialization import pretty_dump
from finbot.model import ScopedSession
from finbot.providers import factory as providers_factory
from finbot.providers.base import ProviderBase
from finbot.providers.playwright_base import PlaywrightProviderBase, HEADLESS_SETTING

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
logger = logging.getLogger(__name__)

def create_parser() -> ArgumentParser:
    parser = ArgumentParser("Test finbot provider")
    parser.add_argument(
        "-p", "--provider",
        choices=list(providers_factory.PROVIDERS.keys()),
        required=True,
        type=str,
        help="Provider"
    )
    parser.add_argument(
        "--valuation-currency",
        type=str,
        default="EUR",
        help="Valuation currency (only has an impact on the assets classification)"
    )
    parser.add_argument(
        "--show-browser",
        default=False,
        action="store_const",
        const=True,
        help="For Playwright-based providers, shows the browser.",
    )
    auth_group = parser.add_mutually_exclusive_group()
    auth_group.add_argument(
        "-a", "--auth-payload",
        type=str,
        required=False,
        default=None,
        help="Provider authentication payload (JSON)"
    )
    auth_group.add_argument(
        "-af", "--auth-payload-file",
        type=Path,
        required=False,
        default=None,
        help="Path to provider authentication payload file (JSON)"
    )
    auth_group.add_argument(
        "-al", "--auth-payload-from-linked-account-id",
        type=int,
        required=False,
        default=None,
        help="Use authentication payload saved with a specific linked account"
    )
    return parser


def get_authentication_payload(settings) -> dict[str, Any] | None:
    if settings.auth_payload:
        return json.loads(settings.auth_payload)
    if settings.auth_payload_file:
        return json.loads(settings.auth_payload_file.read_text())
    if settings.auth_payload_from_linked_account_id:
        from finbot.model import LinkedAccount
        with ScopedSession() as session:
            linked_account: LinkedAccount = session.query(LinkedAccount).get(settings.auth_payload_from_linked_account_id)
            return linked_account.plain_credentials

    return None


async def async_main(
    provider_type: type[ProviderBase],
    auth_payload: dict[str, Any] | None,
    valuation_currency: CurrencyCode,
    **extra_kwargs,
):
    async with provider_type.create(auth_payload, valuation_currency, **extra_kwargs) as provider_api:
        await provider_api.initialize()
        print(pretty_dump({
            "accounts": await provider_api.get_accounts(),
            "assets": await provider_api.get_assets(),
            "liabilities": await provider_api.get_liabilities()
        }, indent=2))


def main():
    settings = create_parser().parse_args()
    auth_payload = get_authentication_payload(settings)
    provider_type = providers_factory.get_provider(settings.provider)
    extra_kwargs = {}
    if settings.show_browser and issubclass(provider_type, PlaywrightProviderBase):
        extra_kwargs[HEADLESS_SETTING] = False
    asyncio.run(async_main(
        provider_type=provider_type,
        auth_payload=auth_payload,
        valuation_currency=settings.valuation_currency,
        **extra_kwargs
    ))


if __name__ == "__main__":
    main()
