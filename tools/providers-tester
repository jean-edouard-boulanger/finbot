#!/usr/bin/env python3.7
from functools import partial
from contextlib import closing
from multiprocessing.pool import ThreadPool
from finbot.providers.support.selenium import DefaultBrowserFactory
from finbot.providers.factory import get_provider
from finbot.core import secure, fx_market
from finbot.core.utils import pretty_dump
from datetime import datetime, timedelta
import functools
import stackprinter
import argparse
import logging
import sys
import json
import terminaltables
import time
import os


@functools.lru_cache(128)
def get_fx_rate(home_ccy, foreign_ccy):
    return fx_market.get_xccy_rate(home_ccy, foreign_ccy)


def wait_forever():
    while True:
        time.sleep(60)


class Price(object):
    def __init__(self, amount, currency):
        self._amount = amount
        self._currency = currency

    def amount(self, currency_override=None):
        if currency_override is not None:
            return self._amount * get_fx_rate(self._currency, currency_override)
        return self._amount

    def currency(self):
        return self._currency


class Asset(object):
    def __init__(self, name, amount, asset_type):
        self.name = name
        self.asset_type = asset_type
        self._amount = amount

    def amount(self, currency_override=None):
        return self._amount.amount(currency_override)


class ProviderData(object):
    def __init__(self, name, accounts=None):
        self.name = name
        self.accounts = accounts or {}

    def amount(self, currency):
        return sum(account.amount(currency) for account in self.accounts.values())


class AccountData(object):
    def __init__(self, account=None, balance=None, assets=None, 
                 liabilities=None):
        self.account = account
        self.balance = balance
        self.assets = assets or []
        self.liabilities = liabilities or []

    def amount(self, currency_override=None):
        return self.balance.amount(currency_override)


class AssetTree(object):
    def __init__(self, providers=None):
        self.providers = providers or []

    def amount(self, currency):
        return sum(provider.amount(currency) for provider in self.providers)


def fetch_data(settings, browser_factory, account):
    class DummyException(Exception):
        pass
    catch_exc = Exception if settings.pause_on_error else DummyException
    provider = get_provider(account["provider_id"])
    with closing(provider.api_module.Api(browser_factory=browser_factory)) as api:
        try:
            credentials = provider.api_module.Credentials.init(account["credentials"])
            logging.info(f"[{provider.description}] authenticate {credentials.user_id}")
            api.authenticate(credentials)
            logging.info(f"[{provider.description}] authenticate - done")

            provider_data = ProviderData(name=provider.description)

            txn_to_date = datetime.now()
            txn_from_date = (txn_to_date - timedelta(days=7))
            logging.info(f"[{provider.description}] fetching transactions " 
                         f"from {txn_from_date.date().isoformat()} to {txn_to_date.date().isoformat()}")
            transactions = api.get_transactions(txn_from_date, txn_to_date)
            if settings.dump_transactions:
                logging.info(f"[{provider.description}] transactions {pretty_dump(transactions)}")
            logging.info(f"[{provider.description}] fetching transactions - done")

            logging.info(f"[{provider.description}] fetching balances")
            balances = api.get_balances()
            if settings.dump_balances:
                logging.info(f"[{provider.description}] balances {pretty_dump(balances)}")
            for entry in balances["accounts"]:
                account = entry["account"]
                account_data = AccountData(
                    account=account,
                    balance=Price(entry["balance"], account["iso_currency"]))
                provider_data.accounts[account["id"]] = account_data
            logging.info(f"[{provider.description}] fetching balances - done")

            logging.info(f"[{provider.description}] fetching assets")
            assets = api.get_assets()
            if settings.dump_assets:
                logging.info(f"[{provider.description}] assets {pretty_dump(assets)}")
            for entry in assets["accounts"]:
                account = entry["account"]
                account_data = provider_data.accounts[account["id"]]
                for asset in entry["assets"]:
                    account_data.assets.append(Asset(
                        name=asset["name"],
                        amount=Price(asset["value"], account["iso_currency"]),
                        asset_type=asset["type"]))

            logging.info(f"[{provider.description}] fetching assets - done")

            logging.info(f"[{provider.description}] fetching liabilities")
            liabilities = api.get_liabilities()
            if settings.dump_liabilities:
                logging.info(f"[{provider.description}] liabilities {pretty_dump(liabilities)}")
            logging.info(f"[{provider.description}] fetching liabilities - done")

            return provider_data
        except KeyboardInterrupt:
            raise
        except catch_exc as e:
            logging.warning(f"error while fetching data for provider_id={account['provider_id']}: {e}")
            logging.warning(stackprinter.format(style="darkbg3"))
            logging.warning("PAUSING execution")
            logging.warning("CTRL^C to exit")
            wait_forever()


def create_arguments_parser():
    parser = argparse.ArgumentParser("finance automation tester")
    parser.add_argument("--secret-file", required=True)
    parser.add_argument("--dump-balances", action="store_true", default=False)
    parser.add_argument("--dump-assets", action="store_true", default=False)
    parser.add_argument("--dump-liabilities", action="store_true", default=False)
    parser.add_argument("--dump-transactions", action="store_true", default=False)
    parser.add_argument("--accounts-file", required=True)
    parser.add_argument("--show-browser", action="store_false", default=True, dest="headless")
    parser.add_argument("--no-threadpool", action="store_false", default=True, dest="threadpool")
    parser.add_argument("--pause-on-error", action="store_true", default=False, dest="pause_on_error")
    parser.add_argument("--developer-tools", action="store_true", default=False, dest="developer_tools")
    parser.add_argument("--providers", type=str, dest="accounts", default=None, required=False)
    return parser


def should_read_accounts_from_env(accounts_configuration):
    return any(val.startswith(":env") for val in accounts_configuration)


def resolve_providers(providers_settings):
    if ":prompt" in providers_settings:
        assert len(providers_settings) == 1
        return resolve_providers(input("providers (comma separated): ").strip().split(","))
    elif ":all" in providers_settings:
        assert len(providers_settings) == 1
        return []
    elif should_read_accounts_from_env(providers_settings):
        assert len(providers_settings) == 1
        _, var_name = providers_settings[0].split("=")
        return resolve_providers(os.environ[var_name].split(","))
    return providers_settings


def main():
    logging.basicConfig(stream=sys.stdout, level=logging.INFO,
                        format='%(asctime)s [%(levelname)s] %(message)s (%(filename)s:%(lineno)d)')
    parser = create_arguments_parser()
    settings = parser.parse_args()

    browser_factory = DefaultBrowserFactory(
        headless=settings.headless,
        developer_tools=settings.developer_tools,
        enable_tracing=True)

    selected_providers = resolve_providers(settings.accounts.split(",") if settings.accounts else [])
    load_all = all(provider_id.startswith("~") for provider_id in selected_providers)

    with open(settings.secret_file, "rb") as secret_file:
        secret = secret_file.read()
        with open(settings.accounts_file, "rb") as accounts_file:
            account_data = json.loads(
                secure.fernet_decrypt(accounts_file.read(), secret).decode())

    logging.info(f"selected providers: {', '.join(selected_providers)}")

    selected_accounts = [
        account for account in account_data["linked_accounts"]
        if (load_all and f"~{account['provider_id']}" not in selected_providers)
        or (account["provider_id"] in selected_providers)
    ]

    fetcher = partial(fetch_data, settings, browser_factory)
    if settings.threadpool:
        with ThreadPool(processes=8) as pool:
            all_data = pool.map(fetcher, selected_accounts)
    else:
        all_data = map(fetcher, selected_accounts)

    currency = account_data["user_account"]["settings"]["valuation_ccy"]
    logging.info(f"valuation currency is set to {currency}")

    asset_tree = AssetTree(all_data)
    all_assets_amount = asset_tree.amount(currency)
    if all_assets_amount == 0.0:
        print("no assets")
        return

    raw_table = [["Account", "Value", "Weight", "Currency"]]
    raw_table.append([
        "(All assets)",
        f"{all_assets_amount:.2f}",
        "100.00%",
        currency])
    raw_table.append([])
    for provider_data in asset_tree.providers:
        provider_amount = provider_data.amount(currency)
        provider_pc = (provider_amount / all_assets_amount) * 100.0
        raw_table.append([
            f"  + {provider_data.name}",
            f"{provider_amount:.2f}",
            f"{provider_pc:.2f}%",
            currency])
        for account_data in provider_data.accounts.values():
            account_amount = account_data.amount(currency)
            account_pc = (account_amount / all_assets_amount) * 100.0
            raw_table.append([
                f"    + {account_data.account['name']} ({account_data.account['type'].capitalize()})",
                f"{account_amount:.2f}",
                f"{account_pc:.2f}%",
                currency
            ])
            for asset in account_data.assets:
                asset_amount = asset.amount(currency)
                asset_pc = (asset_amount / all_assets_amount) * 100.0
                raw_table.append([
                    f"      * {asset.name} ({asset.asset_type.capitalize()})",
                    f"{asset_amount:.2f}",
                    f"{asset_pc:.2f}%",
                    currency
                ])
        raw_table.append(["", "", ""])

    print(terminaltables.AsciiTable(raw_table).table)


if __name__ == "__main__":
    main()
