#!/usr/bin/env python
import json
import logging
import sys
from argparse import ArgumentParser
from pathlib import Path
from typing import Any

from finbot.core.serialization import pretty_dump
from finbot.providers import factory as providers_factory

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)


def create_parser() -> ArgumentParser:
    parser = ArgumentParser("Test finbot provider")
    parser.add_argument(
        "-p", "--provider",
        choices=list(providers_factory.PROVIDERS.keys()),
        required=True,
        type=str,
        help="Provider"
    )
    parser.add_argument(
        "--valuation-currency",
        type=str,
        default="EUR",
        help="Valuation currency (only has an impact on the assets classification)"
    )
    auth_group = parser.add_mutually_exclusive_group()
    auth_group.add_argument(
        "-a", "--auth-payload",
        type=str,
        required=False,
        default=None,
        help="Provider authentication payload (JSON)"
    )
    auth_group.add_argument(
        "-af", "--auth-payload-file",
        type=Path,
        required=False,
        default=None,
        help="Path to provider authentication payload file (JSON)"
    )
    return parser


def get_authentication_payload(settings) -> dict[str, Any] | None:
    if settings.auth_payload:
        return json.loads(settings.auth_payload)
    if settings.auth_payload_file:
        return json.loads(settings.auth_payload_file.read_text())
    return None


def main():
    settings = create_parser().parse_args()
    auth_payload = get_authentication_payload(settings)
    provider_type = providers_factory.get_provider(settings.provider)
    with provider_type.create(auth_payload, settings.valuation_currency) as provider_api:
        provider_api.initialize()
        print(pretty_dump({
            "balances": provider_api.get_balances(),
            "assets": provider_api.get_assets(),
            "liabilities": provider_api.get_liabilities()
        }, indent=2))


if __name__ == "__main__":
    main()
