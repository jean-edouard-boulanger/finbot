#!/usr/bin/env python3.11
from argparse import ArgumentParser
from finbot.model import UserAccount
from finbot.core.logging import configure_logging
from finbot.core.db.session import Session
from finbot.core.serialization import pretty_dump
from finbot.core import environment
from sqlalchemy import create_engine
from sqlalchemy.orm import scoped_session, sessionmaker


FINBOT_ENV = environment.get()
configure_logging(FINBOT_ENV.desired_log_level)

db_engine = create_engine(FINBOT_ENV.database_url)
db_session = Session(scoped_session(sessionmaker(bind=db_engine)))

def create_parser() -> ArgumentParser:
    parser = ArgumentParser(description="Dump user account metadata")
    parser.add_argument("--id", type=int, required=True, help="Linked account id")
    return parser


def main():
    settings = create_parser().parse_args()
    account: UserAccount = db_session.query(UserAccount).filter_by(id=settings.id).one()
    print(pretty_dump({
        "id": account.id,
        "email": account.email,
        "full_name": account.full_name,
        "mobile_phone_number": account.mobile_phone_number,
        "settings": {
            "valuation_ccy": account.settings.valuation_ccy,
        },
        "linked_accounts": [
            {
                "id": linked_account.id,
                "provider_id": linked_account.provider_id,
                "account_name": linked_account.account_name,
                "deleted": linked_account.deleted,
                "frozen": linked_account.frozen,
                "created_at": linked_account.created_at,
                "updated_at": linked_account.updated_at
            }
            for linked_account in account.linked_accounts
        ],
        "created_at": account.created_at.isoformat(),
        "updated_at": account.updated_at.isoformat()
    }, indent=2))


if __name__ == "__main__":
    main()