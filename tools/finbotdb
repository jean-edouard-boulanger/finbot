#!/usr/bin/env python3.11
import argparse
import datetime
import json
import logging
import sys

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from finbot.core.environment import get_database_url
from finbot.core.logging import configure_logging
from finbot.model import Base, Provider, UserAccountHistoryEntry

configure_logging()


def hydrate_tool(settings, engine, session):
    with open(settings.data_file) as f:
        data = json.load(f)

        logging.info("adding providers")
        providers = list(Provider(**entry) for entry in data["providers"])
        for provider in providers:
            session.merge(provider)

    session.commit()
    logging.info("hydrated finbotdb with default data")
    return True


def parse_input_date(date_str):
    if date_str == "now":
        return datetime.datetime.now()
    return datetime.datetime.strptime(date_str, "%d-%b-%Y")


def disable_history_entry_tool(settings, engine, session):
    history_entry = session.query(UserAccountHistoryEntry).filter_by(id=settings.history_entry_id).first()
    history_entry.available = False
    session.add(history_entry)
    session.commit()


def build_tool(settings, engine, session):
    Base.metadata.create_all(engine)
    return True


def destroy_tool(settings, engine, session):
    Base.metadata.drop_all(engine)
    return True


def setup_hydrate_subparser(parser):
    parser.add_argument("-f", "--data-file", type=str, help="path to hydrate data file", required=True)


def setup_disable_history_entry_subparser(parser):
    parser.add_argument("--history-entry-id", type=int, required=True)


def create_parser():
    parser = argparse.ArgumentParser(prog='finbotdb utility')
    parser.add_argument("--database", type=str, default=get_database_url())
    subparsers = parser.add_subparsers(help='tools')
    for tool_name, tool in all_tools.items():
        subparser = subparsers.add_parser(tool_name, help=tool["description"])
        subparser.set_defaults(tool_name=tool_name)
        tool["parser_builder"](subparser)
    return parser


all_tools = {
    "build": {
        "description": "create all tables in database",
        "parser_builder": (lambda _: None),
        "handler": build_tool
    },
    "destroy": {
        "description": "remove all tables in database",
        "parser_builder": (lambda _: None),
        "handler": destroy_tool
    },
    "hydrate": {
        "description": "hydrate database with minimal data",
        "parser_builder": setup_hydrate_subparser,
        "handler": hydrate_tool
    },
    "disable-history-entry": {
        "description": "mark history entry as unavailable",
        "parser_builder": setup_disable_history_entry_subparser,
        "handler": disable_history_entry_tool
    }
}


def main():
    parser = create_parser()
    settings = parser.parse_args()
    if not hasattr(settings, "tool_name"):
        parser.print_usage()
        return
    db_engine = create_engine(settings.database)
    db_session = sessionmaker(bind=db_engine)()
    return all_tools[settings.tool_name]["handler"](settings, db_engine, db_session)


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
