/* tslint:disable */
/* eslint-disable */
/**
 * Finbot application service
 * API documentation for appwsrv
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  GetUserAccountValuationByAssetClassResponse,
  GetUserAccountValuationByAssetTypeResponse,
  GetUserAccountValuationByCurrencyExposureResponse,
  GetUserAccountValuationHistoryByAssetClassResponse,
  GetUserAccountValuationHistoryByAssetTypeResponse,
  GetUserAccountValuationHistoryResponse,
  GetUserAccountValuationResponse,
  HTTPValidationError,
  ValuationFrequency,
} from "../models/index";
import {
  GetUserAccountValuationByAssetClassResponseFromJSON,
  GetUserAccountValuationByAssetClassResponseToJSON,
  GetUserAccountValuationByAssetTypeResponseFromJSON,
  GetUserAccountValuationByAssetTypeResponseToJSON,
  GetUserAccountValuationByCurrencyExposureResponseFromJSON,
  GetUserAccountValuationByCurrencyExposureResponseToJSON,
  GetUserAccountValuationHistoryByAssetClassResponseFromJSON,
  GetUserAccountValuationHistoryByAssetClassResponseToJSON,
  GetUserAccountValuationHistoryByAssetTypeResponseFromJSON,
  GetUserAccountValuationHistoryByAssetTypeResponseToJSON,
  GetUserAccountValuationHistoryResponseFromJSON,
  GetUserAccountValuationHistoryResponseToJSON,
  GetUserAccountValuationResponseFromJSON,
  GetUserAccountValuationResponseToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  ValuationFrequencyFromJSON,
  ValuationFrequencyToJSON,
} from "../models/index";

export interface GetUserAccountHistoricalValuationRequest {
  userAccountId: number;
  fromTime?: Date | null;
  toTime?: Date | null;
  frequency?: ValuationFrequency;
}

export interface GetUserAccountHistoricalValuationByAssetClassRequest {
  userAccountId: number;
  fromTime?: Date | null;
  toTime?: Date | null;
  frequency?: ValuationFrequency;
}

export interface GetUserAccountHistoricalValuationByAssetTypeRequest {
  userAccountId: number;
  fromTime?: Date | null;
  toTime?: Date | null;
  frequency?: ValuationFrequency;
}

export interface GetUserAccountValuationRequest {
  userAccountId: number;
}

export interface GetUserAccountValuationByAssetClassRequest {
  userAccountId: number;
}

export interface GetUserAccountValuationByAssetTypeRequest {
  userAccountId: number;
}

export interface GetUserAccountValuationByCurrencyExposureRequest {
  userAccountId: number;
}

export interface TriggerUserAccountValuationRequest {
  userAccountId: number;
}

/**
 * UserAccountsValuationApi - interface
 *
 * @export
 * @interface UserAccountsValuationApiInterface
 */
export interface UserAccountsValuationApiInterface {
  /**
   * Get user account valuation historical valuation
   * @summary Get User Account Historical Valuation
   * @param {number} userAccountId
   * @param {Date} [fromTime]
   * @param {Date} [toTime]
   * @param {ValuationFrequency} [frequency]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsValuationApiInterface
   */
  getUserAccountHistoricalValuationRaw(
    requestParameters: GetUserAccountHistoricalValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountValuationHistoryResponse>>;

  /**
   * Get user account valuation historical valuation
   * Get User Account Historical Valuation
   */
  getUserAccountHistoricalValuation(
    requestParameters: GetUserAccountHistoricalValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationHistoryResponse>;

  /**
   * Get user account valuation historical valuation by asset class
   * @summary Get User Account Historical Valuation By Asset Class
   * @param {number} userAccountId
   * @param {Date} [fromTime]
   * @param {Date} [toTime]
   * @param {ValuationFrequency} [frequency]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsValuationApiInterface
   */
  getUserAccountHistoricalValuationByAssetClassRaw(
    requestParameters: GetUserAccountHistoricalValuationByAssetClassRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<GetUserAccountValuationHistoryByAssetClassResponse>
  >;

  /**
   * Get user account valuation historical valuation by asset class
   * Get User Account Historical Valuation By Asset Class
   */
  getUserAccountHistoricalValuationByAssetClass(
    requestParameters: GetUserAccountHistoricalValuationByAssetClassRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationHistoryByAssetClassResponse>;

  /**
   * Get user account valuation historical valuation by asset type
   * @summary Get User Account Historical Valuation By Asset Type
   * @param {number} userAccountId
   * @param {Date} [fromTime]
   * @param {Date} [toTime]
   * @param {ValuationFrequency} [frequency]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsValuationApiInterface
   */
  getUserAccountHistoricalValuationByAssetTypeRaw(
    requestParameters: GetUserAccountHistoricalValuationByAssetTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<GetUserAccountValuationHistoryByAssetTypeResponse>
  >;

  /**
   * Get user account valuation historical valuation by asset type
   * Get User Account Historical Valuation By Asset Type
   */
  getUserAccountHistoricalValuationByAssetType(
    requestParameters: GetUserAccountHistoricalValuationByAssetTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationHistoryByAssetTypeResponse>;

  /**
   * Get user account valuation
   * @summary Get User Account Valuation
   * @param {number} userAccountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsValuationApiInterface
   */
  getUserAccountValuationRaw(
    requestParameters: GetUserAccountValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountValuationResponse>>;

  /**
   * Get user account valuation
   * Get User Account Valuation
   */
  getUserAccountValuation(
    requestParameters: GetUserAccountValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationResponse>;

  /**
   * Get user account valuation by asset class
   * @summary Get User Account Valuation By Asset Class
   * @param {number} userAccountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsValuationApiInterface
   */
  getUserAccountValuationByAssetClassRaw(
    requestParameters: GetUserAccountValuationByAssetClassRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountValuationByAssetClassResponse>>;

  /**
   * Get user account valuation by asset class
   * Get User Account Valuation By Asset Class
   */
  getUserAccountValuationByAssetClass(
    requestParameters: GetUserAccountValuationByAssetClassRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationByAssetClassResponse>;

  /**
   * Get user account valuation by asset type
   * @summary Get User Account Valuation By Asset Type
   * @param {number} userAccountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsValuationApiInterface
   */
  getUserAccountValuationByAssetTypeRaw(
    requestParameters: GetUserAccountValuationByAssetTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountValuationByAssetTypeResponse>>;

  /**
   * Get user account valuation by asset type
   * Get User Account Valuation By Asset Type
   */
  getUserAccountValuationByAssetType(
    requestParameters: GetUserAccountValuationByAssetTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationByAssetTypeResponse>;

  /**
   * Get user account valuation by currency exposure
   * @summary Get User Account Valuation By Currency Exposure
   * @param {number} userAccountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsValuationApiInterface
   */
  getUserAccountValuationByCurrencyExposureRaw(
    requestParameters: GetUserAccountValuationByCurrencyExposureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<GetUserAccountValuationByCurrencyExposureResponse>
  >;

  /**
   * Get user account valuation by currency exposure
   * Get User Account Valuation By Currency Exposure
   */
  getUserAccountValuationByCurrencyExposure(
    requestParameters: GetUserAccountValuationByCurrencyExposureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationByCurrencyExposureResponse>;

  /**
   * Trigger user account valuation
   * @summary Trigger User Account Valuation
   * @param {number} userAccountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsValuationApiInterface
   */
  triggerUserAccountValuationRaw(
    requestParameters: TriggerUserAccountValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Trigger user account valuation
   * Trigger User Account Valuation
   */
  triggerUserAccountValuation(
    requestParameters: TriggerUserAccountValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object>;
}

/**
 *
 */
export class UserAccountsValuationApi
  extends runtime.BaseAPI
  implements UserAccountsValuationApiInterface
{
  /**
   * Get user account valuation historical valuation
   * Get User Account Historical Valuation
   */
  async getUserAccountHistoricalValuationRaw(
    requestParameters: GetUserAccountHistoricalValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountValuationHistoryResponse>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling getUserAccountHistoricalValuation().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["fromTime"] != null) {
      queryParameters["from_time"] = (
        requestParameters["fromTime"] as any
      ).toISOString();
    }

    if (requestParameters["toTime"] != null) {
      queryParameters["to_time"] = (
        requestParameters["toTime"] as any
      ).toISOString();
    }

    if (requestParameters["frequency"] != null) {
      queryParameters["frequency"] = requestParameters["frequency"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/valuation/history/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserAccountValuationHistoryResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get user account valuation historical valuation
   * Get User Account Historical Valuation
   */
  async getUserAccountHistoricalValuation(
    requestParameters: GetUserAccountHistoricalValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationHistoryResponse> {
    const response = await this.getUserAccountHistoricalValuationRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get user account valuation historical valuation by asset class
   * Get User Account Historical Valuation By Asset Class
   */
  async getUserAccountHistoricalValuationByAssetClassRaw(
    requestParameters: GetUserAccountHistoricalValuationByAssetClassRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<GetUserAccountValuationHistoryByAssetClassResponse>
  > {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling getUserAccountHistoricalValuationByAssetClass().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["fromTime"] != null) {
      queryParameters["from_time"] = (
        requestParameters["fromTime"] as any
      ).toISOString();
    }

    if (requestParameters["toTime"] != null) {
      queryParameters["to_time"] = (
        requestParameters["toTime"] as any
      ).toISOString();
    }

    if (requestParameters["frequency"] != null) {
      queryParameters["frequency"] = requestParameters["frequency"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/valuation/history/by/asset_class/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserAccountValuationHistoryByAssetClassResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get user account valuation historical valuation by asset class
   * Get User Account Historical Valuation By Asset Class
   */
  async getUserAccountHistoricalValuationByAssetClass(
    requestParameters: GetUserAccountHistoricalValuationByAssetClassRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationHistoryByAssetClassResponse> {
    const response =
      await this.getUserAccountHistoricalValuationByAssetClassRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get user account valuation historical valuation by asset type
   * Get User Account Historical Valuation By Asset Type
   */
  async getUserAccountHistoricalValuationByAssetTypeRaw(
    requestParameters: GetUserAccountHistoricalValuationByAssetTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<GetUserAccountValuationHistoryByAssetTypeResponse>
  > {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling getUserAccountHistoricalValuationByAssetType().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["fromTime"] != null) {
      queryParameters["from_time"] = (
        requestParameters["fromTime"] as any
      ).toISOString();
    }

    if (requestParameters["toTime"] != null) {
      queryParameters["to_time"] = (
        requestParameters["toTime"] as any
      ).toISOString();
    }

    if (requestParameters["frequency"] != null) {
      queryParameters["frequency"] = requestParameters["frequency"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/valuation/history/by/asset_type/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserAccountValuationHistoryByAssetTypeResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get user account valuation historical valuation by asset type
   * Get User Account Historical Valuation By Asset Type
   */
  async getUserAccountHistoricalValuationByAssetType(
    requestParameters: GetUserAccountHistoricalValuationByAssetTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationHistoryByAssetTypeResponse> {
    const response = await this.getUserAccountHistoricalValuationByAssetTypeRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get user account valuation
   * Get User Account Valuation
   */
  async getUserAccountValuationRaw(
    requestParameters: GetUserAccountValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountValuationResponse>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling getUserAccountValuation().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/valuation/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserAccountValuationResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get user account valuation
   * Get User Account Valuation
   */
  async getUserAccountValuation(
    requestParameters: GetUserAccountValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationResponse> {
    const response = await this.getUserAccountValuationRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get user account valuation by asset class
   * Get User Account Valuation By Asset Class
   */
  async getUserAccountValuationByAssetClassRaw(
    requestParameters: GetUserAccountValuationByAssetClassRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountValuationByAssetClassResponse>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling getUserAccountValuationByAssetClass().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/valuation/by/asset_class/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserAccountValuationByAssetClassResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get user account valuation by asset class
   * Get User Account Valuation By Asset Class
   */
  async getUserAccountValuationByAssetClass(
    requestParameters: GetUserAccountValuationByAssetClassRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationByAssetClassResponse> {
    const response = await this.getUserAccountValuationByAssetClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get user account valuation by asset type
   * Get User Account Valuation By Asset Type
   */
  async getUserAccountValuationByAssetTypeRaw(
    requestParameters: GetUserAccountValuationByAssetTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountValuationByAssetTypeResponse>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling getUserAccountValuationByAssetType().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/valuation/by/asset_type/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserAccountValuationByAssetTypeResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get user account valuation by asset type
   * Get User Account Valuation By Asset Type
   */
  async getUserAccountValuationByAssetType(
    requestParameters: GetUserAccountValuationByAssetTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationByAssetTypeResponse> {
    const response = await this.getUserAccountValuationByAssetTypeRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get user account valuation by currency exposure
   * Get User Account Valuation By Currency Exposure
   */
  async getUserAccountValuationByCurrencyExposureRaw(
    requestParameters: GetUserAccountValuationByCurrencyExposureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<GetUserAccountValuationByCurrencyExposureResponse>
  > {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling getUserAccountValuationByCurrencyExposure().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/valuation/by/currency_exposure/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserAccountValuationByCurrencyExposureResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get user account valuation by currency exposure
   * Get User Account Valuation By Currency Exposure
   */
  async getUserAccountValuationByCurrencyExposure(
    requestParameters: GetUserAccountValuationByCurrencyExposureRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountValuationByCurrencyExposureResponse> {
    const response = await this.getUserAccountValuationByCurrencyExposureRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Trigger user account valuation
   * Trigger User Account Valuation
   */
  async triggerUserAccountValuationRaw(
    requestParameters: TriggerUserAccountValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling triggerUserAccountValuation().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/valuation/trigger/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Trigger user account valuation
   * Trigger User Account Valuation
   */
  async triggerUserAccountValuation(
    requestParameters: TriggerUserAccountValuationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.triggerUserAccountValuationRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
