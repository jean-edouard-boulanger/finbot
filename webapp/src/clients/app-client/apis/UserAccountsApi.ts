/* tslint:disable */
/* eslint-disable */
/**
 * Finbot application service
 * API documentation for appwsrv
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CreateUserAccountRequest,
  CreateUserAccountResponse,
  GetUserAccountResponse,
  GetUserAccountSettingsResponse,
  HTTPValidationError,
  IsEmailAvailableResponse,
  IsUserAccountConfiguredResponse,
  UpdateUserAccountPasswordRequest,
  UpdateUserAccountProfileRequest,
  UpdateUserAccountProfileResponse,
} from "../models/index";
import {
  CreateUserAccountRequestFromJSON,
  CreateUserAccountRequestToJSON,
  CreateUserAccountResponseFromJSON,
  CreateUserAccountResponseToJSON,
  GetUserAccountResponseFromJSON,
  GetUserAccountResponseToJSON,
  GetUserAccountSettingsResponseFromJSON,
  GetUserAccountSettingsResponseToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  IsEmailAvailableResponseFromJSON,
  IsEmailAvailableResponseToJSON,
  IsUserAccountConfiguredResponseFromJSON,
  IsUserAccountConfiguredResponseToJSON,
  UpdateUserAccountPasswordRequestFromJSON,
  UpdateUserAccountPasswordRequestToJSON,
  UpdateUserAccountProfileRequestFromJSON,
  UpdateUserAccountProfileRequestToJSON,
  UpdateUserAccountProfileResponseFromJSON,
  UpdateUserAccountProfileResponseToJSON,
} from "../models/index";

export interface CreateUserAccountOperationRequest {
  createUserAccountRequest: CreateUserAccountRequest;
}

export interface GetUserAccountRequest {
  userAccountId: number;
}

export interface GetUserAccountSettingsRequest {
  userAccountId: number;
}

export interface IsEmailAvailableRequest {
  email: string;
}

export interface IsUserAccountConfiguredRequest {
  userAccountId: number;
}

export interface UpdateUserAccountPasswordOperationRequest {
  userAccountId: number;
  updateUserAccountPasswordRequest: UpdateUserAccountPasswordRequest;
}

export interface UpdateUserAccountProfileOperationRequest {
  userAccountId: number;
  updateUserAccountProfileRequest: UpdateUserAccountProfileRequest;
}

/**
 * UserAccountsApi - interface
 *
 * @export
 * @interface UserAccountsApiInterface
 */
export interface UserAccountsApiInterface {
  /**
   *
   * @summary Create User Account
   * @param {CreateUserAccountRequest} createUserAccountRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApiInterface
   */
  createUserAccountRaw(
    requestParameters: CreateUserAccountOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateUserAccountResponse>>;

  /**
   * Create User Account
   */
  createUserAccount(
    requestParameters: CreateUserAccountOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateUserAccountResponse>;

  /**
   *
   * @summary Get User Account
   * @param {number} userAccountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApiInterface
   */
  getUserAccountRaw(
    requestParameters: GetUserAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountResponse>>;

  /**
   * Get User Account
   */
  getUserAccount(
    requestParameters: GetUserAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountResponse>;

  /**
   *
   * @summary Get User Account Settings
   * @param {number} userAccountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApiInterface
   */
  getUserAccountSettingsRaw(
    requestParameters: GetUserAccountSettingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountSettingsResponse>>;

  /**
   * Get User Account Settings
   */
  getUserAccountSettings(
    requestParameters: GetUserAccountSettingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountSettingsResponse>;

  /**
   *
   * @summary Is Email Available
   * @param {string} email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApiInterface
   */
  isEmailAvailableRaw(
    requestParameters: IsEmailAvailableRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IsEmailAvailableResponse>>;

  /**
   * Is Email Available
   */
  isEmailAvailable(
    requestParameters: IsEmailAvailableRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IsEmailAvailableResponse>;

  /**
   *
   * @summary Is User Account Configured
   * @param {number} userAccountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApiInterface
   */
  isUserAccountConfiguredRaw(
    requestParameters: IsUserAccountConfiguredRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IsUserAccountConfiguredResponse>>;

  /**
   * Is User Account Configured
   */
  isUserAccountConfigured(
    requestParameters: IsUserAccountConfiguredRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IsUserAccountConfiguredResponse>;

  /**
   *
   * @summary Update User Account Password
   * @param {number} userAccountId
   * @param {UpdateUserAccountPasswordRequest} updateUserAccountPasswordRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApiInterface
   */
  updateUserAccountPasswordRaw(
    requestParameters: UpdateUserAccountPasswordOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Update User Account Password
   */
  updateUserAccountPassword(
    requestParameters: UpdateUserAccountPasswordOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object>;

  /**
   *
   * @summary Update User Account Profile
   * @param {number} userAccountId
   * @param {UpdateUserAccountProfileRequest} updateUserAccountProfileRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApiInterface
   */
  updateUserAccountProfileRaw(
    requestParameters: UpdateUserAccountProfileOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateUserAccountProfileResponse>>;

  /**
   * Update User Account Profile
   */
  updateUserAccountProfile(
    requestParameters: UpdateUserAccountProfileOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateUserAccountProfileResponse>;
}

/**
 *
 */
export class UserAccountsApi
  extends runtime.BaseAPI
  implements UserAccountsApiInterface
{
  /**
   * Create User Account
   */
  async createUserAccountRaw(
    requestParameters: CreateUserAccountOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateUserAccountResponse>> {
    if (requestParameters["createUserAccountRequest"] == null) {
      throw new runtime.RequiredError(
        "createUserAccountRequest",
        'Required parameter "createUserAccountRequest" was null or undefined when calling createUserAccount().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/accounts/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateUserAccountRequestToJSON(
          requestParameters["createUserAccountRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateUserAccountResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create User Account
   */
  async createUserAccount(
    requestParameters: CreateUserAccountOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateUserAccountResponse> {
    const response = await this.createUserAccountRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get User Account
   */
  async getUserAccountRaw(
    requestParameters: GetUserAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountResponse>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling getUserAccount().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserAccountResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get User Account
   */
  async getUserAccount(
    requestParameters: GetUserAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountResponse> {
    const response = await this.getUserAccountRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get User Account Settings
   */
  async getUserAccountSettingsRaw(
    requestParameters: GetUserAccountSettingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUserAccountSettingsResponse>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling getUserAccountSettings().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/settings/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserAccountSettingsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get User Account Settings
   */
  async getUserAccountSettings(
    requestParameters: GetUserAccountSettingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUserAccountSettingsResponse> {
    const response = await this.getUserAccountSettingsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Is Email Available
   */
  async isEmailAvailableRaw(
    requestParameters: IsEmailAvailableRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IsEmailAvailableResponse>> {
    if (requestParameters["email"] == null) {
      throw new runtime.RequiredError(
        "email",
        'Required parameter "email" was null or undefined when calling isEmailAvailable().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["email"] != null) {
      queryParameters["email"] = requestParameters["email"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/accounts/email_available/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IsEmailAvailableResponseFromJSON(jsonValue),
    );
  }

  /**
   * Is Email Available
   */
  async isEmailAvailable(
    requestParameters: IsEmailAvailableRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IsEmailAvailableResponse> {
    const response = await this.isEmailAvailableRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Is User Account Configured
   */
  async isUserAccountConfiguredRaw(
    requestParameters: IsUserAccountConfiguredRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<IsUserAccountConfiguredResponse>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling isUserAccountConfigured().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/is_configured/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IsUserAccountConfiguredResponseFromJSON(jsonValue),
    );
  }

  /**
   * Is User Account Configured
   */
  async isUserAccountConfigured(
    requestParameters: IsUserAccountConfiguredRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<IsUserAccountConfiguredResponse> {
    const response = await this.isUserAccountConfiguredRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update User Account Password
   */
  async updateUserAccountPasswordRaw(
    requestParameters: UpdateUserAccountPasswordOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling updateUserAccountPassword().',
      );
    }

    if (requestParameters["updateUserAccountPasswordRequest"] == null) {
      throw new runtime.RequiredError(
        "updateUserAccountPasswordRequest",
        'Required parameter "updateUserAccountPasswordRequest" was null or undefined when calling updateUserAccountPassword().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/password/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateUserAccountPasswordRequestToJSON(
          requestParameters["updateUserAccountPasswordRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Update User Account Password
   */
  async updateUserAccountPassword(
    requestParameters: UpdateUserAccountPasswordOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.updateUserAccountPasswordRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update User Account Profile
   */
  async updateUserAccountProfileRaw(
    requestParameters: UpdateUserAccountProfileOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UpdateUserAccountProfileResponse>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling updateUserAccountProfile().',
      );
    }

    if (requestParameters["updateUserAccountProfileRequest"] == null) {
      throw new runtime.RequiredError(
        "updateUserAccountProfileRequest",
        'Required parameter "updateUserAccountProfileRequest" was null or undefined when calling updateUserAccountProfile().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/profile/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateUserAccountProfileRequestToJSON(
          requestParameters["updateUserAccountProfileRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateUserAccountProfileResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update User Account Profile
   */
  async updateUserAccountProfile(
    requestParameters: UpdateUserAccountProfileOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UpdateUserAccountProfileResponse> {
    const response = await this.updateUserAccountProfileRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
