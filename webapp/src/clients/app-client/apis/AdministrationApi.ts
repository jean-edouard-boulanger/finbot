/* tslint:disable */
/* eslint-disable */
/**
 * Finbot application service
 * API documentation for appwsrv
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  EmailDeliverySettings,
  GetEmailDeliveryProvidersResponse,
  GetEmailDeliverySettingsResponse,
  HTTPValidationError,
} from "../models/index";
import {
  EmailDeliverySettingsFromJSON,
  EmailDeliverySettingsToJSON,
  GetEmailDeliveryProvidersResponseFromJSON,
  GetEmailDeliveryProvidersResponseToJSON,
  GetEmailDeliverySettingsResponseFromJSON,
  GetEmailDeliverySettingsResponseToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from "../models/index";

export interface SetEmailDeliverySettingsRequest {
  emailDeliverySettings: EmailDeliverySettings;
  validate?: boolean;
}

/**
 * AdministrationApi - interface
 *
 * @export
 * @interface AdministrationApiInterface
 */
export interface AdministrationApiInterface {
  /**
   * Get email delivery providers
   * @summary Get Email Delivery Providers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministrationApiInterface
   */
  getEmailDeliveryProvidersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetEmailDeliveryProvidersResponse>>;

  /**
   * Get email delivery providers
   * Get Email Delivery Providers
   */
  getEmailDeliveryProviders(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetEmailDeliveryProvidersResponse>;

  /**
   * Get email delivery settings
   * @summary Get Email Delivery Settings
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministrationApiInterface
   */
  getEmailDeliverySettingsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetEmailDeliverySettingsResponse>>;

  /**
   * Get email delivery settings
   * Get Email Delivery Settings
   */
  getEmailDeliverySettings(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetEmailDeliverySettingsResponse>;

  /**
   *
   * @summary Remove Email Delivery Settings
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministrationApiInterface
   */
  removeEmailDeliverySettingsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: any }>>;

  /**
   * Remove Email Delivery Settings
   */
  removeEmailDeliverySettings(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: any }>;

  /**
   *
   * @summary Set Email Delivery Settings
   * @param {EmailDeliverySettings} emailDeliverySettings
   * @param {boolean} [validate]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdministrationApiInterface
   */
  setEmailDeliverySettingsRaw(
    requestParameters: SetEmailDeliverySettingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: any }>>;

  /**
   * Set Email Delivery Settings
   */
  setEmailDeliverySettings(
    requestParameters: SetEmailDeliverySettingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: any }>;
}

/**
 *
 */
export class AdministrationApi
  extends runtime.BaseAPI
  implements AdministrationApiInterface
{
  /**
   * Get email delivery providers
   * Get Email Delivery Providers
   */
  async getEmailDeliveryProvidersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetEmailDeliveryProvidersResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/settings/email_delivery/providers/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetEmailDeliveryProvidersResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get email delivery providers
   * Get Email Delivery Providers
   */
  async getEmailDeliveryProviders(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetEmailDeliveryProvidersResponse> {
    const response = await this.getEmailDeliveryProvidersRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get email delivery settings
   * Get Email Delivery Settings
   */
  async getEmailDeliverySettingsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetEmailDeliverySettingsResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/settings/email_delivery/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetEmailDeliverySettingsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get email delivery settings
   * Get Email Delivery Settings
   */
  async getEmailDeliverySettings(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetEmailDeliverySettingsResponse> {
    const response = await this.getEmailDeliverySettingsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Remove Email Delivery Settings
   */
  async removeEmailDeliverySettingsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: any }>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/settings/email_delivery/`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Remove Email Delivery Settings
   */
  async removeEmailDeliverySettings(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: any }> {
    const response = await this.removeEmailDeliverySettingsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Set Email Delivery Settings
   */
  async setEmailDeliverySettingsRaw(
    requestParameters: SetEmailDeliverySettingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: any }>> {
    if (requestParameters["emailDeliverySettings"] == null) {
      throw new runtime.RequiredError(
        "emailDeliverySettings",
        'Required parameter "emailDeliverySettings" was null or undefined when calling setEmailDeliverySettings().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["validate"] != null) {
      queryParameters["validate"] = requestParameters["validate"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/settings/email_delivery/`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: EmailDeliverySettingsToJSON(
          requestParameters["emailDeliverySettings"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Set Email Delivery Settings
   */
  async setEmailDeliverySettings(
    requestParameters: SetEmailDeliverySettingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: any }> {
    const response = await this.setEmailDeliverySettingsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
