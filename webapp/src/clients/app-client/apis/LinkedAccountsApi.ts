/* tslint:disable */
/* eslint-disable */
/**
 * Finbot application service
 * API documentation for appwsrv
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  GetLinkedAccountResponse,
  GetLinkedAccountsResponse,
  HTTPValidationError,
  LinkAccountRequest,
  UpdateLinkedAccountCredentialsRequest,
  UpdateLinkedAccountMetadataRequest,
} from "../models/index";
import {
  GetLinkedAccountResponseFromJSON,
  GetLinkedAccountResponseToJSON,
  GetLinkedAccountsResponseFromJSON,
  GetLinkedAccountsResponseToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  LinkAccountRequestFromJSON,
  LinkAccountRequestToJSON,
  UpdateLinkedAccountCredentialsRequestFromJSON,
  UpdateLinkedAccountCredentialsRequestToJSON,
  UpdateLinkedAccountMetadataRequestFromJSON,
  UpdateLinkedAccountMetadataRequestToJSON,
} from "../models/index";

export interface DeleteLinkedAccountRequest {
  userAccountId: number;
  linkedAccountId: number;
}

export interface GetLinkedAccountRequest {
  userAccountId: number;
  linkedAccountId: number;
}

export interface GetUserAccountLinkedAccountsRequest {
  userAccountId: number;
}

export interface LinkNewAccountRequest {
  userAccountId: number;
  linkAccountRequest: LinkAccountRequest;
  validate?: boolean;
  persist?: boolean;
}

export interface UpdateLinkedAccountCredentialsOperationRequest {
  userAccountId: number;
  linkedAccountId: number;
  updateLinkedAccountCredentialsRequest: UpdateLinkedAccountCredentialsRequest;
  validate?: boolean;
  persist?: boolean;
}

export interface UpdateLinkedAccountMetadataOperationRequest {
  userAccountId: number;
  linkedAccountId: number;
  updateLinkedAccountMetadataRequest: UpdateLinkedAccountMetadataRequest;
}

/**
 * LinkedAccountsApi - interface
 *
 * @export
 * @interface LinkedAccountsApiInterface
 */
export interface LinkedAccountsApiInterface {
  /**
   * Delete linked account
   * @summary Delete Linked Account
   * @param {number} userAccountId
   * @param {number} linkedAccountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedAccountsApiInterface
   */
  deleteLinkedAccountRaw(
    requestParameters: DeleteLinkedAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Delete linked account
   * Delete Linked Account
   */
  deleteLinkedAccount(
    requestParameters: DeleteLinkedAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object>;

  /**
   * Get linked account
   * @summary Get Linked Account
   * @param {number} userAccountId
   * @param {number} linkedAccountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedAccountsApiInterface
   */
  getLinkedAccountRaw(
    requestParameters: GetLinkedAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetLinkedAccountResponse>>;

  /**
   * Get linked account
   * Get Linked Account
   */
  getLinkedAccount(
    requestParameters: GetLinkedAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetLinkedAccountResponse>;

  /**
   * Get linked accounts
   * @summary Get Linked Accounts
   * @param {number} userAccountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedAccountsApiInterface
   */
  getUserAccountLinkedAccountsRaw(
    requestParameters: GetUserAccountLinkedAccountsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetLinkedAccountsResponse>>;

  /**
   * Get linked accounts
   * Get Linked Accounts
   */
  getUserAccountLinkedAccounts(
    requestParameters: GetUserAccountLinkedAccountsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetLinkedAccountsResponse>;

  /**
   * Link new account
   * @summary Link New Account
   * @param {number} userAccountId
   * @param {LinkAccountRequest} linkAccountRequest
   * @param {boolean} [validate]
   * @param {boolean} [persist]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedAccountsApiInterface
   */
  linkNewAccountRaw(
    requestParameters: LinkNewAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Link new account
   * Link New Account
   */
  linkNewAccount(
    requestParameters: LinkNewAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object>;

  /**
   * Update linked account credentials
   * @summary Update Linked Account Credentials
   * @param {number} userAccountId
   * @param {number} linkedAccountId
   * @param {UpdateLinkedAccountCredentialsRequest} updateLinkedAccountCredentialsRequest
   * @param {boolean} [validate]
   * @param {boolean} [persist]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedAccountsApiInterface
   */
  updateLinkedAccountCredentialsRaw(
    requestParameters: UpdateLinkedAccountCredentialsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Update linked account credentials
   * Update Linked Account Credentials
   */
  updateLinkedAccountCredentials(
    requestParameters: UpdateLinkedAccountCredentialsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object>;

  /**
   * Update linked account metadata
   * @summary Update Linked Account Metadata
   * @param {number} userAccountId
   * @param {number} linkedAccountId
   * @param {UpdateLinkedAccountMetadataRequest} updateLinkedAccountMetadataRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkedAccountsApiInterface
   */
  updateLinkedAccountMetadataRaw(
    requestParameters: UpdateLinkedAccountMetadataOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Update linked account metadata
   * Update Linked Account Metadata
   */
  updateLinkedAccountMetadata(
    requestParameters: UpdateLinkedAccountMetadataOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object>;
}

/**
 *
 */
export class LinkedAccountsApi
  extends runtime.BaseAPI
  implements LinkedAccountsApiInterface
{
  /**
   * Delete linked account
   * Delete Linked Account
   */
  async deleteLinkedAccountRaw(
    requestParameters: DeleteLinkedAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling deleteLinkedAccount().',
      );
    }

    if (requestParameters["linkedAccountId"] == null) {
      throw new runtime.RequiredError(
        "linkedAccountId",
        'Required parameter "linkedAccountId" was null or undefined when calling deleteLinkedAccount().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/linked_accounts/{linked_account_id}/`
          .replace(
            `{${"user_account_id"}}`,
            encodeURIComponent(String(requestParameters["userAccountId"])),
          )
          .replace(
            `{${"linked_account_id"}}`,
            encodeURIComponent(String(requestParameters["linkedAccountId"])),
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Delete linked account
   * Delete Linked Account
   */
  async deleteLinkedAccount(
    requestParameters: DeleteLinkedAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.deleteLinkedAccountRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get linked account
   * Get Linked Account
   */
  async getLinkedAccountRaw(
    requestParameters: GetLinkedAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetLinkedAccountResponse>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling getLinkedAccount().',
      );
    }

    if (requestParameters["linkedAccountId"] == null) {
      throw new runtime.RequiredError(
        "linkedAccountId",
        'Required parameter "linkedAccountId" was null or undefined when calling getLinkedAccount().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/linked_accounts/{linked_account_id}/`
          .replace(
            `{${"user_account_id"}}`,
            encodeURIComponent(String(requestParameters["userAccountId"])),
          )
          .replace(
            `{${"linked_account_id"}}`,
            encodeURIComponent(String(requestParameters["linkedAccountId"])),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetLinkedAccountResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get linked account
   * Get Linked Account
   */
  async getLinkedAccount(
    requestParameters: GetLinkedAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetLinkedAccountResponse> {
    const response = await this.getLinkedAccountRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get linked accounts
   * Get Linked Accounts
   */
  async getUserAccountLinkedAccountsRaw(
    requestParameters: GetUserAccountLinkedAccountsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetLinkedAccountsResponse>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling getUserAccountLinkedAccounts().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/linked_accounts/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetLinkedAccountsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get linked accounts
   * Get Linked Accounts
   */
  async getUserAccountLinkedAccounts(
    requestParameters: GetUserAccountLinkedAccountsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetLinkedAccountsResponse> {
    const response = await this.getUserAccountLinkedAccountsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Link new account
   * Link New Account
   */
  async linkNewAccountRaw(
    requestParameters: LinkNewAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling linkNewAccount().',
      );
    }

    if (requestParameters["linkAccountRequest"] == null) {
      throw new runtime.RequiredError(
        "linkAccountRequest",
        'Required parameter "linkAccountRequest" was null or undefined when calling linkNewAccount().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["validate"] != null) {
      queryParameters["validate"] = requestParameters["validate"];
    }

    if (requestParameters["persist"] != null) {
      queryParameters["persist"] = requestParameters["persist"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/linked_accounts/`.replace(
          `{${"user_account_id"}}`,
          encodeURIComponent(String(requestParameters["userAccountId"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LinkAccountRequestToJSON(requestParameters["linkAccountRequest"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Link new account
   * Link New Account
   */
  async linkNewAccount(
    requestParameters: LinkNewAccountRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.linkNewAccountRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update linked account credentials
   * Update Linked Account Credentials
   */
  async updateLinkedAccountCredentialsRaw(
    requestParameters: UpdateLinkedAccountCredentialsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling updateLinkedAccountCredentials().',
      );
    }

    if (requestParameters["linkedAccountId"] == null) {
      throw new runtime.RequiredError(
        "linkedAccountId",
        'Required parameter "linkedAccountId" was null or undefined when calling updateLinkedAccountCredentials().',
      );
    }

    if (requestParameters["updateLinkedAccountCredentialsRequest"] == null) {
      throw new runtime.RequiredError(
        "updateLinkedAccountCredentialsRequest",
        'Required parameter "updateLinkedAccountCredentialsRequest" was null or undefined when calling updateLinkedAccountCredentials().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["validate"] != null) {
      queryParameters["validate"] = requestParameters["validate"];
    }

    if (requestParameters["persist"] != null) {
      queryParameters["persist"] = requestParameters["persist"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/linked_accounts/{linked_account_id}/credentials/`
          .replace(
            `{${"user_account_id"}}`,
            encodeURIComponent(String(requestParameters["userAccountId"])),
          )
          .replace(
            `{${"linked_account_id"}}`,
            encodeURIComponent(String(requestParameters["linkedAccountId"])),
          ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateLinkedAccountCredentialsRequestToJSON(
          requestParameters["updateLinkedAccountCredentialsRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Update linked account credentials
   * Update Linked Account Credentials
   */
  async updateLinkedAccountCredentials(
    requestParameters: UpdateLinkedAccountCredentialsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.updateLinkedAccountCredentialsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update linked account metadata
   * Update Linked Account Metadata
   */
  async updateLinkedAccountMetadataRaw(
    requestParameters: UpdateLinkedAccountMetadataOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["userAccountId"] == null) {
      throw new runtime.RequiredError(
        "userAccountId",
        'Required parameter "userAccountId" was null or undefined when calling updateLinkedAccountMetadata().',
      );
    }

    if (requestParameters["linkedAccountId"] == null) {
      throw new runtime.RequiredError(
        "linkedAccountId",
        'Required parameter "linkedAccountId" was null or undefined when calling updateLinkedAccountMetadata().',
      );
    }

    if (requestParameters["updateLinkedAccountMetadataRequest"] == null) {
      throw new runtime.RequiredError(
        "updateLinkedAccountMetadataRequest",
        'Required parameter "updateLinkedAccountMetadataRequest" was null or undefined when calling updateLinkedAccountMetadata().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/accounts/{user_account_id}/linked_accounts/{linked_account_id}/metadata/`
          .replace(
            `{${"user_account_id"}}`,
            encodeURIComponent(String(requestParameters["userAccountId"])),
          )
          .replace(
            `{${"linked_account_id"}}`,
            encodeURIComponent(String(requestParameters["linkedAccountId"])),
          ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateLinkedAccountMetadataRequestToJSON(
          requestParameters["updateLinkedAccountMetadataRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Update linked account metadata
   * Update Linked Account Metadata
   */
  async updateLinkedAccountMetadata(
    requestParameters: UpdateLinkedAccountMetadataOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.updateLinkedAccountMetadataRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
