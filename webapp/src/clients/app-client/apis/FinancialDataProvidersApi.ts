/* tslint:disable */
/* eslint-disable */
/**
 * Finbot application service
 * API documentation for appwsrv
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CreateOrUpdateProviderRequest,
  CreateOrUpdateProviderResponse,
  GetPlaidSettingsResponse,
  GetProviderResponse,
  GetProvidersResponse,
  HTTPValidationError,
} from "../models/index";
import {
  CreateOrUpdateProviderRequestFromJSON,
  CreateOrUpdateProviderRequestToJSON,
  CreateOrUpdateProviderResponseFromJSON,
  CreateOrUpdateProviderResponseToJSON,
  GetPlaidSettingsResponseFromJSON,
  GetPlaidSettingsResponseToJSON,
  GetProviderResponseFromJSON,
  GetProviderResponseToJSON,
  GetProvidersResponseFromJSON,
  GetProvidersResponseToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from "../models/index";

export interface DeleteFinancialDataProviderRequest {
  providerId: string;
}

export interface GetFinancialDataProviderRequest {
  providerId: string;
}

export interface UpdateOrCreateFinancialDataProviderRequest {
  createOrUpdateProviderRequest: CreateOrUpdateProviderRequest;
}

/**
 * FinancialDataProvidersApi - interface
 *
 * @export
 * @interface FinancialDataProvidersApiInterface
 */
export interface FinancialDataProvidersApiInterface {
  /**
   * Delete provider
   * @summary Delete Provider
   * @param {string} providerId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FinancialDataProvidersApiInterface
   */
  deleteFinancialDataProviderRaw(
    requestParameters: DeleteFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: any }>>;

  /**
   * Delete provider
   * Delete Provider
   */
  deleteFinancialDataProvider(
    requestParameters: DeleteFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: any }>;

  /**
   * Get provider
   * @summary Get Provider
   * @param {string} providerId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FinancialDataProvidersApiInterface
   */
  getFinancialDataProviderRaw(
    requestParameters: GetFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProviderResponse>>;

  /**
   * Get provider
   * Get Provider
   */
  getFinancialDataProvider(
    requestParameters: GetFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProviderResponse>;

  /**
   * Get providers
   * @summary Get Providers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FinancialDataProvidersApiInterface
   */
  getFinancialDataProvidersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProvidersResponse>>;

  /**
   * Get providers
   * Get Providers
   */
  getFinancialDataProviders(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProvidersResponse>;

  /**
   * Get plaid settings
   * @summary Get Plaid Settings
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FinancialDataProvidersApiInterface
   */
  getPlaidSettingsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetPlaidSettingsResponse>>;

  /**
   * Get plaid settings
   * Get Plaid Settings
   */
  getPlaidSettings(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetPlaidSettingsResponse>;

  /**
   * Update or create provider
   * @summary Update Or Create Provider
   * @param {CreateOrUpdateProviderRequest} createOrUpdateProviderRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FinancialDataProvidersApiInterface
   */
  updateOrCreateFinancialDataProviderRaw(
    requestParameters: UpdateOrCreateFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateOrUpdateProviderResponse>>;

  /**
   * Update or create provider
   * Update Or Create Provider
   */
  updateOrCreateFinancialDataProvider(
    requestParameters: UpdateOrCreateFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateOrUpdateProviderResponse>;
}

/**
 *
 */
export class FinancialDataProvidersApi
  extends runtime.BaseAPI
  implements FinancialDataProvidersApiInterface
{
  /**
   * Delete provider
   * Delete Provider
   */
  async deleteFinancialDataProviderRaw(
    requestParameters: DeleteFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: any }>> {
    if (requestParameters["providerId"] == null) {
      throw new runtime.RequiredError(
        "providerId",
        'Required parameter "providerId" was null or undefined when calling deleteFinancialDataProvider().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/providers/{provider_id}/`.replace(
          `{${"provider_id"}}`,
          encodeURIComponent(String(requestParameters["providerId"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Delete provider
   * Delete Provider
   */
  async deleteFinancialDataProvider(
    requestParameters: DeleteFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: any }> {
    const response = await this.deleteFinancialDataProviderRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get provider
   * Get Provider
   */
  async getFinancialDataProviderRaw(
    requestParameters: GetFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProviderResponse>> {
    if (requestParameters["providerId"] == null) {
      throw new runtime.RequiredError(
        "providerId",
        'Required parameter "providerId" was null or undefined when calling getFinancialDataProvider().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/providers/{provider_id}/`.replace(
          `{${"provider_id"}}`,
          encodeURIComponent(String(requestParameters["providerId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProviderResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get provider
   * Get Provider
   */
  async getFinancialDataProvider(
    requestParameters: GetFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProviderResponse> {
    const response = await this.getFinancialDataProviderRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get providers
   * Get Providers
   */
  async getFinancialDataProvidersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProvidersResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/providers/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProvidersResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get providers
   * Get Providers
   */
  async getFinancialDataProviders(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProvidersResponse> {
    const response = await this.getFinancialDataProvidersRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get plaid settings
   * Get Plaid Settings
   */
  async getPlaidSettingsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetPlaidSettingsResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/providers/plaid/settings/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetPlaidSettingsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get plaid settings
   * Get Plaid Settings
   */
  async getPlaidSettings(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetPlaidSettingsResponse> {
    const response = await this.getPlaidSettingsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Update or create provider
   * Update Or Create Provider
   */
  async updateOrCreateFinancialDataProviderRaw(
    requestParameters: UpdateOrCreateFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateOrUpdateProviderResponse>> {
    if (requestParameters["createOrUpdateProviderRequest"] == null) {
      throw new runtime.RequiredError(
        "createOrUpdateProviderRequest",
        'Required parameter "createOrUpdateProviderRequest" was null or undefined when calling updateOrCreateFinancialDataProvider().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/providers/`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: CreateOrUpdateProviderRequestToJSON(
          requestParameters["createOrUpdateProviderRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateOrUpdateProviderResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update or create provider
   * Update Or Create Provider
   */
  async updateOrCreateFinancialDataProvider(
    requestParameters: UpdateOrCreateFinancialDataProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateOrUpdateProviderResponse> {
    const response = await this.updateOrCreateFinancialDataProviderRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
